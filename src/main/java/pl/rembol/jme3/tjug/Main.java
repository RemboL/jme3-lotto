package pl.rembol.jme3.tjug;import com.jme3.app.SimpleApplication;import com.jme3.app.state.AbstractAppState;import com.jme3.bullet.BulletAppState;import com.jme3.bullet.control.RigidBodyControl;import com.jme3.input.KeyInput;import com.jme3.input.controls.ActionListener;import com.jme3.input.controls.KeyTrigger;import com.jme3.light.AmbientLight;import com.jme3.light.DirectionalLight;import com.jme3.math.ColorRGBA;import com.jme3.math.FastMath;import com.jme3.math.Vector3f;import com.jme3.renderer.queue.RenderQueue;import com.jme3.scene.Spatial;import com.jme3.system.AppSettings;import pl.rembol.jme3.utils.Materials;import java.util.ArrayList;import java.util.List;import java.util.Objects;import static com.jme3.math.FastMath.sqr;public class Main extends SimpleApplication {    private List<Ball> balls = new ArrayList<>();    private int phase = 0;    private boolean windUp = false;    public static void main(String[] args) {        Main app = new Main();        app.setShowSettings(false);        AppSettings settings = new AppSettings(true);        settings.setWidth(1280);        settings.setHeight(720);        app.setSettings(settings);        app.start();    }    @Override    public void simpleInitApp() {        getFlyByCamera().setMoveSpeed(30);        Spatial chamber = assetManager.loadModel("chamber.blend");        chamber.setQueueBucket(RenderQueue.Bucket.Transparent);        Materials.setAlpha(chamber, "Diffuse", 0.1f);        Materials.setAlpha(chamber, "Ambient", 0.1f);        getCamera().setLocation(new Vector3f(0, 10, 70));        rootNode.attachChild(chamber);        AmbientLight ambientLight = new AmbientLight();        ambientLight.setColor(ColorRGBA.White.mult(0.3f));        rootNode.addLight(ambientLight);        DirectionalLight directionalLight = new DirectionalLight();        directionalLight.setColor(ColorRGBA.White);        directionalLight.setDirection(new Vector3f(1f, -1f, -1f).normalize());        rootNode.addLight(directionalLight);        BulletAppState bulletAppState = new BulletAppState();        stateManager.attach(bulletAppState);        bulletAppState.getPhysicsSpace().setGravity(Vector3f.UNIT_Y.negate().mult(20f));//        bulletAppState.setDebugEnabled(true);        RigidBodyControl rigidBodyControl = new RigidBodyControl( 0f);        chamber.addControl(rigidBodyControl);        bulletAppState.getPhysicsSpace().add(rigidBodyControl);        for (int i = 0; i < 10; ++i) {            for (int j = 0; j < 8; ++j) {                Ball ball = new Ball(this, rootNode, new Vector3f(-9 + i * 2, 22.7f - j * 2, -25.7f), "" + (j * 10 + i + 1));                balls.add(ball);            }        }        stateManager.attach(new WindUpAppState());        inputManager.addMapping("nextPhase", new KeyTrigger(KeyInput.KEY_SPACE));        inputManager.addListener((ActionListener) (name, isPressed, tpf) -> {            if (!isPressed) {                nextPhase();            }        }, "nextPhase");    }    private void nextPhase() {        if (phase == 0) {            phase = 1;            balls.forEach(ball -> ball.getControl(RigidBodyControl.class).setKinematic(false));        } else if (phase == 1) {            phase = 2;            windUp = true;        } else if (phase == 2){            phase = 3;            windUp = false;        }    }    public class WindUpAppState extends AbstractAppState {        public void update(float tpf) {            balls.forEach(ball -> {                if (windUp) {                    if (FastMath.sqrt(sqr(ball.getLocalTranslation().x) + sqr(ball.getLocalTranslation().z)) < (20 - ball.getLocalTranslation().y) / 4 ) {                        ball.getControl(RigidBodyControl.class).applyCentralForce(Vector3f.UNIT_Y.mult(60));                    }                }                if (FastMath.sqrt(sqr(ball.getLocalTranslation().x) + sqr(ball.getLocalTranslation().z)) < 3 && ball.getLocalTranslation().y > 19) {                    ball.getControl(RigidBodyControl.class).applyCentralForce(Vector3f.UNIT_X.mult(60));                }            });        }    }}